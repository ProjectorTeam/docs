swagger: '2.0'
info:
  description: This is Song projector Middleware service.
  version: 1.0.0
  title: Song projector Middleware service
  contact:
    email: songprojector@gmail.com
  license:
    name: MIT License
    url: http://opensource.org/licenses/MIT
host: localhost:8080
basePath: /
tags:
  - name: playlists
    description: Playlist Controller
  - name: songs
    description: Song Controller
  - name: tags
    description: Tag Controller
  - name: users
    description: Operations about users
paths:
  /playlists:
    get:
      tags:
        - playlists
      summary: Returns all playlists
      operationId: getAllUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/PlaylistSimpleDTO'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Playlist not found
      security:
        - Authorization:
            - global
      deprecated: false
    post:
      tags:
        - playlists
      summary: Creates new playlist
      operationId: createPlaylistUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: playlistDTO
          description: Song
          required: false
          schema:
            $ref: '#/definitions/PlaylistDTO'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/PlaylistDTO'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
      security:
        - Authorization:
            - global
      deprecated: false
  /playlists/{playlistId}:
    get:
      tags:
        - playlists
      summary: Returns a specific playlist
      operationId: getPlaylistUsingGET
      produces:
        - '*/*'
      parameters:
        - name: playlistId
          in: path
          description: playlistId
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PlaylistDTO'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Playlist not found
        '409':
          description: Playlist and user don't belong to the same organization
      security:
        - Authorization:
            - global
      deprecated: false
    put:
      tags:
        - playlists
      summary: Updates a specific playlist
      operationId: updatePlaylistUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: playlistDTO
          description: Song
          required: false
          schema:
            $ref: '#/definitions/PlaylistDTO'
        - name: playlistId
          in: path
          description: playlistId
          required: true
          type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Playlist not found
        '409':
          description: Playlist and user don't belong to the same organization
      security:
        - Authorization:
            - global
      deprecated: false
    delete:
      tags:
        - playlists
      summary: Deletes a specific playlist
      operationId: deletePlaylistUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: playlistId
          in: path
          description: playlistId
          required: true
          type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Playlist not found
        '409':
          description: Playlist and user don't belong to the same organization
      security:
        - Authorization:
            - global
      deprecated: false
  /songs:
    get:
      tags:
        - songs
      summary: Search songs by name or tags or lyrics
      operationId: searchSongsUsingGET
      produces:
        - '*/*'
      parameters:
        - name: lyrics
          in: query
          description: lyrics
          required: false
          type: string
        - name: name
          in: query
          description: name
          required: false
          type: string
        - name: page
          in: query
          description: page
          required: false
          type: integer
          default: 0
          format: int32
        - name: size
          in: query
          description: size
          required: false
          type: integer
          default: 200
          format: int32
        - name: tags
          in: query
          description: tags
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SongPageDTO«SongSimpleDTO»'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
      security:
        - Authorization:
            - global
      deprecated: false
    post:
      tags:
        - songs
      summary: Creates new song
      operationId: createSongUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: songDTO
          description: Song
          required: false
          schema:
            $ref: '#/definitions/SongDTO'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/SongDTO'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
      security:
        - Authorization:
            - global
      deprecated: false
    put:
      tags:
        - songs
      summary: Updates a song
      operationId: updateSongUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: songDTO
          description: Song
          required: false
          schema:
            $ref: '#/definitions/SongDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SongDTO'
        '401':
          description: Invalid username/password supplied
        '409':
          description: Conflicting user and song organizations
      security:
        - Authorization:
            - global
      deprecated: false
  /songs/dual-display:
    post:
      tags:
        - songs
      summary: Imports song from DualDisplay archive
      operationId: importDualDisplayUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SongDTO'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
      security:
        - Authorization:
            - global
      deprecated: false
  /songs/{songId}:
    get:
      tags:
        - songs
      summary: Returns a specific song
      operationId: getSongUsingGET
      produces:
        - '*/*'
      parameters:
        - name: songId
          in: path
          description: songId
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SongDTO'
        '401':
          description: Unauthorized
        '404':
          description: Song not found
        '409':
          description: User and song not in the same organization
      security:
        - Authorization:
            - global
      deprecated: false
    delete:
      tags:
        - songs
      summary: Deletes a specific song
      operationId: deleteSongUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: songId
          in: path
          description: songId
          required: true
          type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '404':
          description: Song not found
        '409':
          description: User and song not in the same organization
      security:
        - Authorization:
            - global
      deprecated: false
  /tags:
    get:
      tags:
        - tags
      summary: Returns all tags
      operationId: getAllUsingGET_1
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/TagDTO'
        '401':
          description: Unauthorized
      security:
        - Authorization:
            - global
      deprecated: false
    post:
      tags:
        - tags
      summary: Creates new tag
      operationId: createTagUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: tagDTO
          description: Tag
          required: false
          schema:
            $ref: '#/definitions/TagDTO'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/TagDTO'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
      security:
        - Authorization:
            - global
      deprecated: false
  /tags/{tagId}:
    get:
      tags:
        - tags
      summary: Returns a specific tag
      operationId: getTagUsingGET
      produces:
        - '*/*'
      parameters:
        - name: tagId
          in: path
          description: Tag id
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TagDTO'
        '401':
          description: Unauthorized
        '404':
          description: Tag not found
        '409':
          description: Tag and user don't belong to the same organizations
      security:
        - Authorization:
            - global
      deprecated: false
    put:
      tags:
        - tags
      summary: Updates a specific tag
      operationId: updateTagUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: tagDTO
          description: Tag
          required: false
          schema:
            $ref: '#/definitions/TagDTO'
        - name: tagId
          in: path
          description: Tag id
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '401':
          description: Unauthorized
        '404':
          description: Tag not found
        '409':
          description: Tag and user don't belong to the same organizations
      security:
        - Authorization:
            - global
      deprecated: false
    delete:
      tags:
        - tags
      summary: Deletes a specific tag
      operationId: deleteTagUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: tagId
          in: path
          description: Tag id
          required: false
          type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '404':
          description: Tag not found
        '409':
          description: Tag and user don't belong to the same organizations
      security:
        - Authorization:
            - global
      deprecated: false
  /users/codes:
    post:
      tags:
        - users
      summary: Creates invitation code
      operationId: createcodeUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      responses:
        '201':
          description: Created
          schema:
            type: string
        '401':
          description: Unauthorized
      security:
        - Authorization:
            - global
      deprecated: false
  /users/me:
    get:
      tags:
        - users
      summary: Returns current user's data
      operationId: whoamiUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserResponseDTO'
        '400':
          description: Something went wrong
        '403':
          description: Access denied
        '500':
          description: Expired or invalid JWT token
      security:
        - Authorization:
            - global
        - apiKey: []
      deprecated: false
  /users/refresh:
    post:
      tags:
        - users
      summary: Refreshes the Access token
      operationId: refreshUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: refreshToken
          description: Refresh Token
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TokenDTO'
        '401':
          description: Invalid refresh token
      security:
        - Authorization:
            - global
      deprecated: false
  /users/signin:
    post:
      tags:
        - users
      summary: Authenticates user and returns Access token and Refresh token
      operationId: loginUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: loginData
          description: Signup User
          required: false
          schema:
            $ref: '#/definitions/LoginDataDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TokenDTO'
        '400':
          description: Something went wrong
        '401':
          description: Invalid username/password supplied
      security:
        - Authorization:
            - global
      deprecated: false
  /users/signup:
    post:
      tags:
        - users
      summary: Creates user and returns Access token and Refresh token
      operationId: signupUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: user
          description: Signup User
          required: false
          schema:
            $ref: '#/definitions/UserDataDTO'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/TokenDTO'
        '400':
          description: Something went wrong
        '409':
          description: Username is already in use
      security:
        - Authorization:
            - global
      deprecated: false
  /users/{username}:
    get:
      tags:
        - users
      summary: Returns specific user by username
      operationId: searchUsingGET
      produces:
        - '*/*'
      parameters:
        - name: username
          in: path
          description: Username
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserResponseDTO'
        '400':
          description: Something went wrong
        '401':
          description: Unauthorized
        '404':
          description: The user doesn't exist
        '500':
          description: Expired or invalid JWT token
      security:
        - Authorization:
            - global
        - apiKey: []
      deprecated: false
    delete:
      tags:
        - users
      summary: Deletes specific user by username
      operationId: deleteUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: username
          in: path
          description: Username
          required: false
          type: string
      responses:
        '204':
          description: No Content
          schema:
            type: string
        '400':
          description: Something went wrong
        '401':
          description: Unauthorized
        '404':
          description: The user doesn't exist
        '500':
          description: Expired or invalid JWT token
      security:
        - Authorization:
            - global
        - apiKey: []
      deprecated: false
securityDefinitions:
  Authorization:
    type: apiKey
    name: Authorization
    in: header
definitions:
  LoginDataDTO:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
    title: LoginDataDTO
  PlaylistDTO:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      songs:
        type: array
        items:
          $ref: '#/definitions/SongForPlaylistDTO'
    title: PlaylistDTO
  PlaylistSimpleDTO:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
    title: PlaylistSimpleDTO
  SongDTO:
    type: object
    properties:
      id:
        type: string
      lyrics:
        type: string
      name:
        type: string
      tags:
        type: array
        items:
          type: string
    title: SongDTO
  SongForPlaylistDTO:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      songOrder:
        type: integer
        format: int32
    title: SongForPlaylistDTO
  SongPageDTO«SongSimpleDTO»:
    type: object
    properties:
      content:
        type: array
        items:
          $ref: '#/definitions/SongSimpleDTO'
      lastPage:
        type: boolean
      pageNumber:
        type: integer
        format: int32
      pageSize:
        type: integer
        format: int32
      totalSize:
        type: integer
        format: int64
    title: SongPageDTO«SongSimpleDTO»
  SongSimpleDTO:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
    title: SongSimpleDTO
  TagDTO:
    type: object
    properties:
      color:
        type: string
      id:
        type: string
      name:
        type: string
    title: TagDTO
  TokenDTO:
    type: object
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    title: TokenDTO
  UserDataDTO:
    type: object
    properties:
      email:
        type: string
      organization:
        type: string
      password:
        type: string
      type:
        type: string
        enum:
          - admin
          - member
      username:
        type: string
    title: UserDataDTO
  UserResponseDTO:
    type: object
    properties:
      id:
        type: string
      username:
        type: string
      email:
        type: string
      userRoles:
        type: array
        items:
          type: string
          enum:
            - ADMIN_ORG
            - MEMBER_ORG
    title: UserResponseDTO
